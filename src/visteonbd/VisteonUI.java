/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visteonbd;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;


/**
 *
 * @author Andr√© Ferreira
 */

public class VisteonUI extends javax.swing.JFrame { 
String pass= "Admin2021";
    /**
     * Creates new form VisteonUI
     */
    public static secondPanel secondpanel;
            
    public VisteonUI() {
        initComponents();
        ComboProdName.addItem("");
        ComboNext.addItem("");  
        ComboOrigin.addItem("");      
        ComboLine.addItem("");
        try {      
            AtionClick();
            putProdName();
            putOrigin();
            putNxtStep();
            AtionClickFinal(); 
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Functions in constructer couldnt be opened ");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1 = new java.awt.List();
        jScrollBar1 = new javax.swing.JScrollBar();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        code = new javax.swing.JTextField();
        INSERT = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ComboLine = new javax.swing.JComboBox<>();
        ComboProdName = new javax.swing.JComboBox<>();
        ComboOrigin = new javax.swing.JComboBox<>();
        ComboNext = new javax.swing.JComboBox<>();
        Quantity = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        ProdLine = new javax.swing.JTextField();
        Price = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Total = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        Comment = new javax.swing.JTextField();

        jButton2.setText("Delete last row");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Boards", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(51, 51, 255))); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel2.setText("Line");

        jLabel3.setText("ProdLine");

        jLabel4.setText("ProdName");

        jLabel1.setText("SerialCode");

        code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codeKeyPressed(evt);
            }
        });

        INSERT.setText("Insert");
        INSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSERTActionPerformed(evt);
            }
        });
        INSERT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                INSERTKeyPressed(evt);
            }
        });

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        Clear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ClearKeyPressed(evt);
            }
        });

        jLabel5.setText("Origin");

        jLabel6.setText("NextStep");

        jLabel7.setText("Quantity");

        jLabel8.setText("UnitPrice");

        ComboLine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboLineKeyPressed(evt);
            }
        });

        ComboProdName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboProdNameKeyPressed(evt);
            }
        });

        ComboOrigin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboOriginKeyPressed(evt);
            }
        });

        ComboNext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ComboNextKeyPressed(evt);
            }
        });

        Quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                QuantityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                QuantityKeyReleased(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });

        ProdLine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ProdLineKeyPressed(evt);
            }
        });

        Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PriceKeyPressed(evt);
            }
        });

        jLabel9.setText("Total");

        jButton4.setText("Delete last row");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jButton5.setText("Correction");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel7)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboLine, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(44, 44, 44)
                                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ComboNext, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel1))
                                    .addGap(34, 34, 34)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ProdLine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(INSERT)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(114, 114, 114))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ComboProdName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(ProdLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ComboOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jLabel9)
                    .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clear)
                    .addComponent(INSERT))
                .addGap(20, 20, 20))
        );

        ComboProdName.getAccessibleContext().setAccessibleName("");
        ProdLine.setEditable(false);
        ProdLine.setBackground(Color.lightGray);
        Price.setEditable(false);
        Price.setBackground(Color.lightGray);
        Total.setEditable(false);
        Total.setBackground(Color.lightGray);

        Comment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CommentMouseClicked(evt);
            }
        });
        Comment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CommentKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CommentKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Comment, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void ClearAll(){
    Font font = new Font("arial", Font.ITALIC, 12);
    Comment.setFont(font);
    Comment.setForeground(Color.LIGHT_GRAY);
    Comment.setText("Leave a comment...");
    ComboLine.removeAllItems();
    ComboLine.addItem("");
    Quantity.setText("");
    code.setText("");
    Price.setText("");
    ProdLine.setText("");
    ComboProdName.setSelectedIndex(0);
    ComboLine.setSelectedIndex(0);
    ComboOrigin.setSelectedIndex(0);
    ComboNext.setSelectedIndex(0);
    Total.setText("");
    Comment.setEditable(true);
    secondpanel.DeleteAll();
    }
    
    
    private void correction(){
        Submit submit= new Submit();
        Logs logs= new Logs();
        Comments comments = new Comments ();
        
        if (  ComboProdName.getSelectedIndex()==0 || Price.getText().isEmpty() || Quantity.getText().isEmpty()  ) 
        {
            JOptionPane.showMessageDialog(null,
            "Information not inserted fill all items!",
            "FATAL ERROR! ",
            JOptionPane.ERROR_MESSAGE);
        }else
        {
        String LineRef = ComboLine.getSelectedItem().toString(); 
        String ProdName = ComboProdName.getSelectedItem().toString();
        String Prodline = ProdLine.getText(); 
        String UnitPrice = Price.getText();
        String Qty = Quantity.getText();   
        String QtyMenos = "-" + Qty;
        String s= Comment.getText();
        String d = "Leave a comment...";
        
        int compareTo = d.compareTo( s );
        String user = System.getProperty("user.name");
        
            if( compareTo == 0 || s.length() == 0  )
            {
                JOptionPane.showMessageDialog(null, "Fill comment field!");
                Comment.requestFocus();
            }
            else 
            {
                ClearAll();
                Comment.setEditable(true);
                submit.SubmitAction(LineRef, Prodline , ProdName , "correction" ,  "correction" , "correction"  , QtyMenos , UnitPrice , user);

                try {       
                    logs.insertLog();
                } catch (IOException ex) {
                    Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                comments.SaveComents(s);
                JOptionPane.showMessageDialog(null,
                "Correction made successfully!",
                "SUCESS!",
                JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void INSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSERTActionPerformed
        Submit submit= new Submit();
        Logs logs= new Logs();
        Comments comments = new Comments ();
        
        if (  ComboProdName.getSelectedIndex()==0 || ComboOrigin.getSelectedIndex()== 0 || ComboNext.getSelectedIndex() ==0 || 
                Price.getText().isEmpty() || Quantity.getText().isEmpty() || code.getText().isEmpty() ) 
        {
            JOptionPane.showMessageDialog(null,
            "Information not inserted fill all items!",
            "FATAL ERROR! ",
            JOptionPane.ERROR_MESSAGE);
        }else
        {
        String LineRef = ComboLine.getSelectedItem().toString(); 
        String ProdName = ComboProdName.getSelectedItem().toString(); 
        String Origin = ComboOrigin.getSelectedItem().toString(); 
        String NxtStep = ComboNext.getSelectedItem().toString(); 
        String Prodline = ProdLine.getText(); 
        String UnitPrice = Price.getText();
        String Qty = Quantity.getText();
        String Code = code.getText();        
        String s= Comment.getText();
        String d = "Leave a comment...";
        
        int compareTo = d.compareTo( s );
        String user = System.getProperty("user.name");
            
            
            if( compareTo == 0 || s.length() == 0  )
            {
                int result = JOptionPane.showConfirmDialog(null, 
                "Are you sure you dont want to make comment?",null, JOptionPane.YES_NO_OPTION);
                if(result == JOptionPane.YES_OPTION) {
                    ClearAll();
                    Comment.setEditable(true);
                    submit.SubmitAction(LineRef, Prodline , ProdName , Code ,  Origin , NxtStep  , Qty , UnitPrice , user);
                    try {       
                        logs.insertLog();
                    } catch (IOException ex) {
                        Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null,
                    "Information added successfully without comment!",
                    "SUCESS!",
                    JOptionPane.WARNING_MESSAGE); 
                }  
            }
            else 
            {
                ClearAll();
                Comment.setEditable(true);
                submit.SubmitAction(LineRef, Prodline , ProdName , Code ,  Origin , NxtStep  , Qty , UnitPrice , user);
                try {       
                    logs.insertLog();
                } catch (IOException ex) {
                    Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                comments.SaveComents(s);
                JOptionPane.showMessageDialog(null,
                "Information added successfully with comment!",
                "SUCESS!",
                JOptionPane.INFORMATION_MESSAGE);
            }
            secondpanel.DeleteAll();
        }
       
    }//GEN-LAST:event_INSERTActionPerformed
    
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        ClearAll();
    }//GEN-LAST:event_ClearActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void ComboProdNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboProdNameKeyPressed
        int key = evt.getKeyCode();
        if (key == 10)
            ComboLine.requestFocus();
        else if ( key == 32 ) {
            if(ComboProdName.isPopupVisible())
            {
                ComboProdName.hidePopup();
            }
            else 
            {
                ComboProdName.showPopup();
            }
        }
    }//GEN-LAST:event_ComboProdNameKeyPressed

    private void ComboLineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboLineKeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            code.requestFocus();
        }
        else if ( key == 32 ) {
            if(ComboLine.isPopupVisible())
            {
                ComboLine.hidePopup();
            }
            else 
            {
                ComboLine.showPopup();
            }
        }
    }//GEN-LAST:event_ComboLineKeyPressed

    private void ComboOriginKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboOriginKeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            ComboNext.requestFocus();
        }
        else if ( key == 32 ) {
            if(ComboOrigin.isPopupVisible())
            {
                ComboOrigin.hidePopup();
            }
            else 
            {
                ComboOrigin.showPopup();
            }
        }
    }//GEN-LAST:event_ComboOriginKeyPressed

    private void ProdLineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProdLineKeyPressed
        int key = evt.getKeyCode();
        if (key == 10)
        ComboLine.requestFocus();
    }//GEN-LAST:event_ProdLineKeyPressed

    private void codeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeKeyPressed
        int key = evt.getKeyCode();
        if (key == 10)
        ComboOrigin.requestFocus();
    }//GEN-LAST:event_codeKeyPressed

    private void PriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PriceKeyPressed
        int key = evt.getKeyCode();
        if (key == 10)
        Comment.requestFocus();
    }//GEN-LAST:event_PriceKeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            ComboProdName.requestFocus();
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void ClearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ClearKeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            jButton3.requestFocus();
        }
    }//GEN-LAST:event_ClearKeyPressed

    private void INSERTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSERTKeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            jButton3.requestFocus();
        }
    }//GEN-LAST:event_INSERTKeyPressed

    private void ComboNextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ComboNextKeyPressed
        int key = evt.getKeyCode();
        if (key == 10){
            Quantity.requestFocus();
        }
        else if ( key == 32 ) {
            if(ComboNext.isPopupVisible())
            {
                ComboNext.hidePopup();
            }
            else 
            {
                ComboNext.showPopup();
            }
        }
    }//GEN-LAST:event_ComboNextKeyPressed

    public void Totalput (Float e){
        String i = String.valueOf(e);
        Total.setText(i);
    }
    
    private void QuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuantityKeyReleased
        String t = Quantity.getText();
        String u = Price.getText();
        int key = evt.getKeyCode();
        if( !u.isEmpty()&& !( key == 8) && (key != 10) ){
            int f = Integer.parseInt(t);
            float h = Float.parseFloat(u);   
            float e = f * h;
            Totalput(e);
        }       
    }//GEN-LAST:event_QuantityKeyReleased

    private void QuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuantityKeyPressed
        String t = Quantity.getText();
        String u = Price.getText();
        int key = evt.getKeyCode();
        if( key == 10  ){
            Comment.requestFocus();
        }
        else if( !(key == 48 || key == 48 || key == 49 || key == 50 || key == 51 || key == 52 || key == 53 || key == 54 || key == 55 || key == 56 || key == 57 || key == 58 || key == 8)){
           JOptionPane.showMessageDialog(null, "Floats or Charaters are not supported!");
           Quantity.setText("");
        } 
    }//GEN-LAST:event_QuantityKeyPressed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DeleteLast delete = new DeleteLast();
        String namex = System.getProperty("user.name");
        int option = JOptionPane.showConfirmDialog(null, "Do you really want to delete last row?", "Warning", JOptionPane.YES_NO_OPTION);
        if(option == 0){
            try {
                delete.Delete(namex);
            } catch (SQLException ex) {
                System.out.println("Could Not Delete \n");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void CommentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CommentMouseClicked
       Comment.setText("");
       Comment.setForeground(Color.BLACK);
    }//GEN-LAST:event_CommentMouseClicked

    private void CommentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CommentKeyReleased
    String g = Comment.getText();
    int key = evt.getKeyCode();
        if ( key != 10 ){
            Comment.requestFocus();
        }   
        if(g.length() == 65 ){
            Comment.setEditable(false);
            JOptionPane.showMessageDialog(null,
            "Maximum width reached!",
            "Stop writing!",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CommentKeyReleased

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
       Comment.setText("Leave a comment...");
       Comment.setForeground(Color.LIGHT_GRAY);
       jPanel1.requestFocus();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        DeleteLast delete = new DeleteLast();
        String namex = System.getProperty("user.name");
        int key = evt.getKeyCode();
        if( key == 10){
            jButton3.requestFocus();
        }
        else {
            try {
                delete.Delete(namex);
            } catch (SQLException ex) {
                Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void CommentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CommentKeyPressed
       String h = Comment.getText();
       String d = "Leave a comment..."; 
       int key = evt.getKeyCode();
       int compareTo = d.compareTo( h );
        if (key == 10) {
            INSERT.requestFocus();
        }
        if (compareTo == 0 && key == 32 ){
           Comment.setText("");
           Comment.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_CommentKeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String ImputedPass;
        JPasswordField pf = new JPasswordField();
        int okCxl = JOptionPane.showConfirmDialog(null, pf, "Enter Password", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (okCxl == JOptionPane.OK_OPTION) {
            String password = new String(pf.getPassword());
           int compareTo = pass.compareTo(password);
           if (compareTo == 0) {
               correction(); 
           }
           else {
               JOptionPane.showMessageDialog(null,
                   "Wrong Pass! Talk to the administrator...",
                   "ERROR!",
                   JOptionPane.ERROR_MESSAGE);  
           }
        } 
    }//GEN-LAST:event_jButton5ActionPerformed
      
    public void putLine( ) throws SQLException{
        ComboLine.removeAllItems();
        AcessConnect acessConnect=new AcessConnect();
        Statement s = null;
        
        ResultSet rs = null;
        Statement ps = acessConnect.connection.createStatement();
        String aux2 = ComboProdName.getSelectedItem().toString();
        
        String sql = "SELECT Line FROM Prodtable WHERE ProductName = '" +aux2+ "'  ";
        
        rs = ps.executeQuery(sql);
       
        while (rs.next()) 
        {
           ComboLine.addItem(rs.getString("Line")); 
        }
    }
    
    public void putProdLine( String aux) throws SQLException{
        AcessConnect acessConnect=new AcessConnect();
        
        ResultSet rs = null;
        Statement ps = acessConnect.connection.createStatement();
      
        String sql = "SELECT Prodline FROM Prodtable where ProductName = '" +aux+ "' ";
        
        rs = ps.executeQuery(sql);
        
         while (rs.next()) 
        {
            ProdLine.setText(rs.getString("ProdLine"));
        }
        String q = Quantity.getText();
        String u = Price.getText(); 
        String cl = ComboLine.getSelectedItem().toString();
        if (!(q.isEmpty()) && !(cl.isEmpty())) {
            String aux1 = ComboProdName.getSelectedItem().toString();  
            secondpanel.putQuantity(aux1, cl, q);
        }
        putLine ();
    }
    
    public void AtionClick () {
     ComboProdName.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                  
                  String aux = e.getItem().toString(); 
                  if(aux.length() > 0){
                  try 
                    {
                        secondpanel.DeleteAll();
                        putProdLine(aux);
                    } catch (SQLException ex) {
                        Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
                    }  
                  }
                }
                String q = Quantity.getText();
                String u = Price.getText();
                
                if (!(u.isEmpty()) && !(q.isEmpty())){
                    int v = Integer.parseInt(q);
                    float w = Float.parseFloat(u);   
                    float t = w * v;
                    Totalput(t);
                }
            }
        });
    } 
    
    public void AtionClickFinal () {
     ComboLine.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                  
                  String aux = e.getItem().toString(); 
                  if(aux.length() > 0){
                  try {
                        putPrice(aux);
                    } catch (SQLException ex) {
                        Logger.getLogger(VisteonUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                  }
                String q = Quantity.getText();
                String u = Price.getText();
                    if (!(u.isEmpty()) && !(q.isEmpty())){
                        int v = Integer.parseInt(q);
                        float w = Float.parseFloat(u);   
                        float t = w * v;
                        Totalput(t);
                    }
                }
            }
        });
    } 
   
    public void putProdName() throws SQLException{
        Font font = new Font("arial", Font.ITALIC, 12);
        Comment.setFont(font);
        Comment.setForeground(Color.LIGHT_GRAY);
        Comment.setText("Leave a comment...");
        
        AcessConnect acessConnect=new AcessConnect();
        Statement s = null;
        
        ResultSet rs = null;
        Statement ps = acessConnect.connection.createStatement();
    
        String sql = "SELECT ProductName FROM ProdTable ";
    
        rs = ps.executeQuery(sql);

        while (rs.next()) 
        {
            ComboProdName.addItem(rs.getNString("ProductName"));
        }
    }
      
      public void putOrigin() throws SQLException{  
        AcessConnect acessConnect=new AcessConnect();
        Statement s = null;
        
        ResultSet rs = null;
        Statement ps = acessConnect.connection.createStatement();
        
        String sql = "SELECT Areacode FROM Origintable ";
    
        rs = ps.executeQuery(sql);
        
        while (rs.next()) 
        {
            ComboOrigin.addItem(rs.getNString("Areacode"));
        }
    } 
    
    public void putNxtStep() throws SQLException{ 
        AcessConnect acessConnect=new AcessConnect();
        Statement s = null;
        
        ResultSet rs = null;
        int i= 1;
        Statement ps = acessConnect.connection.createStatement();
        String sql = "SELECT NxtStep FROM Nextsteptable";
        rs = ps.executeQuery(sql);
       
        while (rs.next()) 
        {
            ComboNext.addItem(rs.getNString("NxtStep"));
        }
    }  
     
    public void putPrice(String i) throws SQLException{ 
        AcessConnect acessConnect=new AcessConnect();
        Statement s = null;
        String q = Quantity.getText();
        String u = Price.getText(); 
        String cl = ComboLine.getSelectedItem().toString();
        if (!(q.isEmpty()) && !(cl.isEmpty())) {
            String aux1 = ComboProdName.getSelectedItem().toString();  
            secondpanel.putQuantity(aux1, cl, q);
        }
        ResultSet rs = null;
        String aux = ComboProdName.getSelectedItem().toString() ;
        Statement ps = acessConnect.connection.createStatement();
        String sql = "SELECT UnitPrice FROM Prodtable WHERE ProductName = '" +aux+ "' AND Line = '" +i+ "' ";
        rs = ps.executeQuery(sql);
        
    while (rs.next()) 
        {
            Price.setText(rs.getNString("UnitPrice"));
        } 
    } 
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisteonUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisteonUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisteonUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisteonUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                JOptionPane.showMessageDialog(null, "Close your Microsoft Access!");  
                new VisteonUI().setVisible(true);  
                secondpanel = new secondPanel();
                secondpanel.setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JComboBox<String> ComboLine;
    private javax.swing.JComboBox<String> ComboNext;
    private javax.swing.JComboBox<String> ComboOrigin;
    private javax.swing.JComboBox<String> ComboProdName;
    private javax.swing.JTextField Comment;
    private javax.swing.JButton INSERT;
    private javax.swing.JTextField Price;
    private javax.swing.JTextField ProdLine;
    private javax.swing.JTextField Quantity;
    private javax.swing.JTextField Total;
    private javax.swing.JTextField code;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables
}